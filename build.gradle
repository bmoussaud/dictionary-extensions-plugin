commonBuildPath = hasProperty("localCommonBuildRepo") ? file(localCommonBuildRepo).toURL().toString() : 'https://github.com/xebialabs/deployit-common-build/raw/3.7.x-maintenance'

apply from: "$commonBuildPath/repositories.gradle"
apply from: "$commonBuildPath/plugin-build.gradle"

group = 'com.xebialabs.deployit.community'
apiVersion = '3.7.0'
version = "${apiVersion}-1-SNAPSHOT"

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

dependencies {
  compile "com.xebialabs.deployit:udm-plugin-api:$apiVersion"
  compile "com.xebialabs.deployit:server-plugin-api:$apiVersion"

  compile "com.samskivert:jmustache:1.3"
  compile "com.google.guava:guava:10.0.1"
  compile deps.deployit_remoting_plugin
  compile deps.overthere

  testCompile 'junit:junit:4.10'
  testCompile deps.deployit_generic_plugin
  testCompile deps.deployit_file_plugin
  testCompile "com.xebialabs.deployit:udm-test-support:$apiVersion"
  testCompile deps.deployit_udm_test_support
  testCompile deps.easymock
  testCompile deps.itest_support
}

repositories {
  mavenLocal()
  if (!rootProject.hasProperty('offline')) {
    mavenCentral()
    maven {
      credentials {
        username nexusUserName
        password nexusPassword
      }
      url "${nexusBaseUrl}/repositories/releases"
    }
  }
}

afterEvaluate { eachProject ->
  Set testTasks = eachProject.tasks.withType(Test)

  testTasks.each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom {
    project {
      build {
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        }
      }
    }
  }.writeTo('pom.xml')
}
